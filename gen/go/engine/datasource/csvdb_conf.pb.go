//
// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: engine/datasource/csvdb_conf.proto

package datasource

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ColumnType int32

const (
	ColumnType_UNKNOWN   ColumnType = 0
	ColumnType_LONG      ColumnType = 1
	ColumnType_FLOAT     ColumnType = 2
	ColumnType_DOUBLE    ColumnType = 3
	ColumnType_STRING    ColumnType = 4
	ColumnType_DATETIME  ColumnType = 5
	ColumnType_TIMESTAMP ColumnType = 6
)

// Enum value maps for ColumnType.
var (
	ColumnType_name = map[int32]string{
		0: "UNKNOWN",
		1: "LONG",
		2: "FLOAT",
		3: "DOUBLE",
		4: "STRING",
		5: "DATETIME",
		6: "TIMESTAMP",
	}
	ColumnType_value = map[string]int32{
		"UNKNOWN":   0,
		"LONG":      1,
		"FLOAT":     2,
		"DOUBLE":    3,
		"STRING":    4,
		"DATETIME":  5,
		"TIMESTAMP": 6,
	}
)

func (x ColumnType) Enum() *ColumnType {
	p := new(ColumnType)
	*p = x
	return p
}

func (x ColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_engine_datasource_csvdb_conf_proto_enumTypes[0].Descriptor()
}

func (ColumnType) Type() protoreflect.EnumType {
	return &file_engine_datasource_csvdb_conf_proto_enumTypes[0]
}

func (x ColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnType.Descriptor instead.
func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return file_engine_datasource_csvdb_conf_proto_rawDescGZIP(), []int{0}
}

type CsvTableConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName string                     `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	DataPath  string                     `protobuf:"bytes,2,opt,name=data_path,json=dataPath,proto3" json:"data_path,omitempty"`
	Columns   []*CsvTableConf_ColumnConf `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *CsvTableConf) Reset() {
	*x = CsvTableConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_datasource_csvdb_conf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvTableConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvTableConf) ProtoMessage() {}

func (x *CsvTableConf) ProtoReflect() protoreflect.Message {
	mi := &file_engine_datasource_csvdb_conf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvTableConf.ProtoReflect.Descriptor instead.
func (*CsvTableConf) Descriptor() ([]byte, []int) {
	return file_engine_datasource_csvdb_conf_proto_rawDescGZIP(), []int{0}
}

func (x *CsvTableConf) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *CsvTableConf) GetDataPath() string {
	if x != nil {
		return x.DataPath
	}
	return ""
}

func (x *CsvTableConf) GetColumns() []*CsvTableConf_ColumnConf {
	if x != nil {
		return x.Columns
	}
	return nil
}

type CsvdbConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbName string          `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	Tables []*CsvTableConf `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *CsvdbConf) Reset() {
	*x = CsvdbConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_datasource_csvdb_conf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvdbConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvdbConf) ProtoMessage() {}

func (x *CsvdbConf) ProtoReflect() protoreflect.Message {
	mi := &file_engine_datasource_csvdb_conf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvdbConf.ProtoReflect.Descriptor instead.
func (*CsvdbConf) Descriptor() ([]byte, []int) {
	return file_engine_datasource_csvdb_conf_proto_rawDescGZIP(), []int{1}
}

func (x *CsvdbConf) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *CsvdbConf) GetTables() []*CsvTableConf {
	if x != nil {
		return x.Tables
	}
	return nil
}

type CsvTableConf_ColumnConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnName string     `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ColumnType ColumnType `protobuf:"varint,2,opt,name=column_type,json=columnType,proto3,enum=scql.engine.csv.ColumnType" json:"column_type,omitempty"`
}

func (x *CsvTableConf_ColumnConf) Reset() {
	*x = CsvTableConf_ColumnConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_datasource_csvdb_conf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvTableConf_ColumnConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvTableConf_ColumnConf) ProtoMessage() {}

func (x *CsvTableConf_ColumnConf) ProtoReflect() protoreflect.Message {
	mi := &file_engine_datasource_csvdb_conf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvTableConf_ColumnConf.ProtoReflect.Descriptor instead.
func (*CsvTableConf_ColumnConf) Descriptor() ([]byte, []int) {
	return file_engine_datasource_csvdb_conf_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CsvTableConf_ColumnConf) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *CsvTableConf_ColumnConf) GetColumnType() ColumnType {
	if x != nil {
		return x.ColumnType
	}
	return ColumnType_UNKNOWN
}

var File_engine_datasource_csvdb_conf_proto protoreflect.FileDescriptor

var file_engine_datasource_csvdb_conf_proto_rawDesc = []byte{
	0x0a, 0x22, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x63, 0x73, 0x76, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x63, 0x73, 0x76, 0x22, 0xfb, 0x01, 0x0a, 0x0c, 0x43, 0x73, 0x76, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x63, 0x73, 0x76, 0x2e, 0x43, 0x73, 0x76, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0x6b, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x71,
	0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x73, 0x76, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x09, 0x43, 0x73, 0x76, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x71, 0x6c,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x73, 0x76, 0x2e, 0x43, 0x73, 0x76, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2a, 0x63, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c,
	0x4f, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x10, 0x06, 0x42, 0xb8, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x63,
	0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x63, 0x73, 0x76, 0x42, 0x0e, 0x43,
	0x73, 0x76, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x63, 0x71, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x53, 0x45, 0x43, 0xaa, 0x02, 0x0f, 0x53, 0x63, 0x71,
	0x6c, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x73, 0x76, 0xca, 0x02, 0x0f, 0x53,
	0x63, 0x71, 0x6c, 0x5c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x43, 0x73, 0x76, 0xe2, 0x02,
	0x1b, 0x53, 0x63, 0x71, 0x6c, 0x5c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x43, 0x73, 0x76,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x53,
	0x63, 0x71, 0x6c, 0x3a, 0x3a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x43, 0x73, 0x76,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_engine_datasource_csvdb_conf_proto_rawDescOnce sync.Once
	file_engine_datasource_csvdb_conf_proto_rawDescData = file_engine_datasource_csvdb_conf_proto_rawDesc
)

func file_engine_datasource_csvdb_conf_proto_rawDescGZIP() []byte {
	file_engine_datasource_csvdb_conf_proto_rawDescOnce.Do(func() {
		file_engine_datasource_csvdb_conf_proto_rawDescData = protoimpl.X.CompressGZIP(file_engine_datasource_csvdb_conf_proto_rawDescData)
	})
	return file_engine_datasource_csvdb_conf_proto_rawDescData
}

var file_engine_datasource_csvdb_conf_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_engine_datasource_csvdb_conf_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_engine_datasource_csvdb_conf_proto_goTypes = []interface{}{
	(ColumnType)(0),                 // 0: scql.engine.csv.ColumnType
	(*CsvTableConf)(nil),            // 1: scql.engine.csv.CsvTableConf
	(*CsvdbConf)(nil),               // 2: scql.engine.csv.CsvdbConf
	(*CsvTableConf_ColumnConf)(nil), // 3: scql.engine.csv.CsvTableConf.ColumnConf
}
var file_engine_datasource_csvdb_conf_proto_depIdxs = []int32{
	3, // 0: scql.engine.csv.CsvTableConf.columns:type_name -> scql.engine.csv.CsvTableConf.ColumnConf
	1, // 1: scql.engine.csv.CsvdbConf.tables:type_name -> scql.engine.csv.CsvTableConf
	0, // 2: scql.engine.csv.CsvTableConf.ColumnConf.column_type:type_name -> scql.engine.csv.ColumnType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_engine_datasource_csvdb_conf_proto_init() }
func file_engine_datasource_csvdb_conf_proto_init() {
	if File_engine_datasource_csvdb_conf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_engine_datasource_csvdb_conf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvTableConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_datasource_csvdb_conf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvdbConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_datasource_csvdb_conf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvTableConf_ColumnConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_engine_datasource_csvdb_conf_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_engine_datasource_csvdb_conf_proto_goTypes,
		DependencyIndexes: file_engine_datasource_csvdb_conf_proto_depIdxs,
		EnumInfos:         file_engine_datasource_csvdb_conf_proto_enumTypes,
		MessageInfos:      file_engine_datasource_csvdb_conf_proto_msgTypes,
	}.Build()
	File_engine_datasource_csvdb_conf_proto = out.File
	file_engine_datasource_csvdb_conf_proto_rawDesc = nil
	file_engine_datasource_csvdb_conf_proto_goTypes = nil
	file_engine_datasource_csvdb_conf_proto_depIdxs = nil
}
