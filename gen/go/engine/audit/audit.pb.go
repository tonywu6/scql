// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: engine/audit/audit.proto

package audit

import (
	api "github.com/secretflow/scql/gen/go/api"
	audit "github.com/secretflow/scql/gen/go/pkg/audit"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *audit.AuditHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Body   *AuditBody         `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *AuditLog) Reset() {
	*x = AuditLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_audit_audit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog) ProtoMessage() {}

func (x *AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_engine_audit_audit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog.ProtoReflect.Descriptor instead.
func (*AuditLog) Descriptor() ([]byte, []int) {
	return file_engine_audit_audit_proto_rawDescGZIP(), []int{0}
}

func (x *AuditLog) GetHeader() *audit.AuditHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AuditLog) GetBody() *AuditBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type AuditBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//
	//	*AuditBody_Uncategorized
	//	*AuditBody_RunDag
	//	*AuditBody_RunPlan
	//	*AuditBody_CreateSession
	//	*AuditBody_StopSession
	//	*AuditBody_JoinDetail
	//	*AuditBody_InDetail
	//	*AuditBody_SqlDetail
	//	*AuditBody_DumpDetail
	//	*AuditBody_PublishDetail
	Body isAuditBody_Body `protobuf_oneof:"body"`
}

func (x *AuditBody) Reset() {
	*x = AuditBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_audit_audit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditBody) ProtoMessage() {}

func (x *AuditBody) ProtoReflect() protoreflect.Message {
	mi := &file_engine_audit_audit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditBody.ProtoReflect.Descriptor instead.
func (*AuditBody) Descriptor() ([]byte, []int) {
	return file_engine_audit_audit_proto_rawDescGZIP(), []int{1}
}

func (m *AuditBody) GetBody() isAuditBody_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *AuditBody) GetUncategorized() *audit.UncategorizedEvent {
	if x, ok := x.GetBody().(*AuditBody_Uncategorized); ok {
		return x.Uncategorized
	}
	return nil
}

func (x *AuditBody) GetRunDag() *RunSubDagEvent {
	if x, ok := x.GetBody().(*AuditBody_RunDag); ok {
		return x.RunDag
	}
	return nil
}

func (x *AuditBody) GetRunPlan() *RunExecPlanEvent {
	if x, ok := x.GetBody().(*AuditBody_RunPlan); ok {
		return x.RunPlan
	}
	return nil
}

func (x *AuditBody) GetCreateSession() *CreateSessionEvent {
	if x, ok := x.GetBody().(*AuditBody_CreateSession); ok {
		return x.CreateSession
	}
	return nil
}

func (x *AuditBody) GetStopSession() *StopSessionEvent {
	if x, ok := x.GetBody().(*AuditBody_StopSession); ok {
		return x.StopSession
	}
	return nil
}

func (x *AuditBody) GetJoinDetail() *JoinNodeDetail {
	if x, ok := x.GetBody().(*AuditBody_JoinDetail); ok {
		return x.JoinDetail
	}
	return nil
}

func (x *AuditBody) GetInDetail() *InNodeDetail {
	if x, ok := x.GetBody().(*AuditBody_InDetail); ok {
		return x.InDetail
	}
	return nil
}

func (x *AuditBody) GetSqlDetail() *SqlNodeDetail {
	if x, ok := x.GetBody().(*AuditBody_SqlDetail); ok {
		return x.SqlDetail
	}
	return nil
}

func (x *AuditBody) GetDumpDetail() *DumpFileNodeDetail {
	if x, ok := x.GetBody().(*AuditBody_DumpDetail); ok {
		return x.DumpDetail
	}
	return nil
}

func (x *AuditBody) GetPublishDetail() *PublishNodeDetail {
	if x, ok := x.GetBody().(*AuditBody_PublishDetail); ok {
		return x.PublishDetail
	}
	return nil
}

type isAuditBody_Body interface {
	isAuditBody_Body()
}

type AuditBody_Uncategorized struct {
	Uncategorized *audit.UncategorizedEvent `protobuf:"bytes,1,opt,name=uncategorized,proto3,oneof"`
}

type AuditBody_RunDag struct {
	RunDag *RunSubDagEvent `protobuf:"bytes,2,opt,name=run_dag,json=runDag,proto3,oneof"`
}

type AuditBody_RunPlan struct {
	RunPlan *RunExecPlanEvent `protobuf:"bytes,3,opt,name=run_plan,json=runPlan,proto3,oneof"`
}

type AuditBody_CreateSession struct {
	CreateSession *CreateSessionEvent `protobuf:"bytes,4,opt,name=create_session,json=createSession,proto3,oneof"`
}

type AuditBody_StopSession struct {
	StopSession *StopSessionEvent `protobuf:"bytes,5,opt,name=stop_session,json=stopSession,proto3,oneof"`
}

type AuditBody_JoinDetail struct {
	JoinDetail *JoinNodeDetail `protobuf:"bytes,6,opt,name=join_detail,json=joinDetail,proto3,oneof"`
}

type AuditBody_InDetail struct {
	InDetail *InNodeDetail `protobuf:"bytes,7,opt,name=in_detail,json=inDetail,proto3,oneof"`
}

type AuditBody_SqlDetail struct {
	SqlDetail *SqlNodeDetail `protobuf:"bytes,8,opt,name=sql_detail,json=sqlDetail,proto3,oneof"`
}

type AuditBody_DumpDetail struct {
	DumpDetail *DumpFileNodeDetail `protobuf:"bytes,9,opt,name=dump_detail,json=dumpDetail,proto3,oneof"`
}

type AuditBody_PublishDetail struct {
	PublishDetail *PublishNodeDetail `protobuf:"bytes,10,opt,name=publish_detail,json=publishDetail,proto3,oneof"`
}

func (*AuditBody_Uncategorized) isAuditBody_Body() {}

func (*AuditBody_RunDag) isAuditBody_Body() {}

func (*AuditBody_RunPlan) isAuditBody_Body() {}

func (*AuditBody_CreateSession) isAuditBody_Body() {}

func (*AuditBody_StopSession) isAuditBody_Body() {}

func (*AuditBody_JoinDetail) isAuditBody_Body() {}

func (*AuditBody_InDetail) isAuditBody_Body() {}

func (*AuditBody_SqlDetail) isAuditBody_Body() {}

func (*AuditBody_DumpDetail) isAuditBody_Body() {}

func (*AuditBody_PublishDetail) isAuditBody_Body() {}

type RunSubDagEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceIp string            `protobuf:"bytes,1,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	DagId    int32             `protobuf:"varint,2,opt,name=dag_id,json=dagId,proto3" json:"dag_id,omitempty"`
	CostTime int64             `protobuf:"varint,3,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"` // unit: ms
	NodeList []*audit.NodeInfo `protobuf:"bytes,4,rep,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
}

func (x *RunSubDagEvent) Reset() {
	*x = RunSubDagEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_audit_audit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunSubDagEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSubDagEvent) ProtoMessage() {}

func (x *RunSubDagEvent) ProtoReflect() protoreflect.Message {
	mi := &file_engine_audit_audit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSubDagEvent.ProtoReflect.Descriptor instead.
func (*RunSubDagEvent) Descriptor() ([]byte, []int) {
	return file_engine_audit_audit_proto_rawDescGZIP(), []int{2}
}

func (x *RunSubDagEvent) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *RunSubDagEvent) GetDagId() int32 {
	if x != nil {
		return x.DagId
	}
	return 0
}

func (x *RunSubDagEvent) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *RunSubDagEvent) GetNodeList() []*audit.NodeInfo {
	if x != nil {
		return x.NodeList
	}
	return nil
}

type RunExecPlanEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceIp     string            `protobuf:"bytes,1,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	CostTime     int64             `protobuf:"varint,2,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"` // unit: ms
	AffectedRows int64             `protobuf:"varint,3,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
	NodeList     []*audit.NodeInfo `protobuf:"bytes,4,rep,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"`
}

func (x *RunExecPlanEvent) Reset() {
	*x = RunExecPlanEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_audit_audit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunExecPlanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunExecPlanEvent) ProtoMessage() {}

func (x *RunExecPlanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_engine_audit_audit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunExecPlanEvent.ProtoReflect.Descriptor instead.
func (*RunExecPlanEvent) Descriptor() ([]byte, []int) {
	return file_engine_audit_audit_proto_rawDescGZIP(), []int{3}
}

func (x *RunExecPlanEvent) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *RunExecPlanEvent) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *RunExecPlanEvent) GetAffectedRows() int64 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

func (x *RunExecPlanEvent) GetNodeList() []*audit.NodeInfo {
	if x != nil {
		return x.NodeList
	}
	return nil
}

type CreateSessionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceIp   string                  `protobuf:"bytes,1,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	Sync       bool                    `protobuf:"varint,2,opt,name=sync,proto3" json:"sync,omitempty"`
	Parameters *api.SessionStartParams `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *CreateSessionEvent) Reset() {
	*x = CreateSessionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_audit_audit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionEvent) ProtoMessage() {}

func (x *CreateSessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_engine_audit_audit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionEvent.ProtoReflect.Descriptor instead.
func (*CreateSessionEvent) Descriptor() ([]byte, []int) {
	return file_engine_audit_audit_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSessionEvent) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *CreateSessionEvent) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

func (x *CreateSessionEvent) GetParameters() *api.SessionStartParams {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type StopSessionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason   string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	SourceIp string `protobuf:"bytes,2,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
}

func (x *StopSessionEvent) Reset() {
	*x = StopSessionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_audit_audit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSessionEvent) ProtoMessage() {}

func (x *StopSessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_engine_audit_audit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSessionEvent.ProtoReflect.Descriptor instead.
func (*StopSessionEvent) Descriptor() ([]byte, []int) {
	return file_engine_audit_audit_proto_rawDescGZIP(), []int{5}
}

func (x *StopSessionEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StopSessionEvent) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

type JoinNodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName   string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	SelfParty  string   `protobuf:"bytes,2,opt,name=self_party,json=selfParty,proto3" json:"self_party,omitempty"`
	SelfRank   int64    `protobuf:"varint,3,opt,name=self_rank,json=selfRank,proto3" json:"self_rank,omitempty"`
	SelfSize   int64    `protobuf:"varint,4,opt,name=self_size,json=selfSize,proto3" json:"self_size,omitempty"`
	PeerSize   int64    `protobuf:"varint,5,opt,name=peer_size,json=peerSize,proto3" json:"peer_size,omitempty"`
	ResultSize int64    `protobuf:"varint,6,opt,name=result_size,json=resultSize,proto3" json:"result_size,omitempty"`
	CostTime   int64    `protobuf:"varint,7,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"` // unit: ms
	PartyCodes []string `protobuf:"bytes,8,rep,name=party_codes,json=partyCodes,proto3" json:"party_codes,omitempty"`
}

func (x *JoinNodeDetail) Reset() {
	*x = JoinNodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_audit_audit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinNodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinNodeDetail) ProtoMessage() {}

func (x *JoinNodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_engine_audit_audit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinNodeDetail.ProtoReflect.Descriptor instead.
func (*JoinNodeDetail) Descriptor() ([]byte, []int) {
	return file_engine_audit_audit_proto_rawDescGZIP(), []int{6}
}

func (x *JoinNodeDetail) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *JoinNodeDetail) GetSelfParty() string {
	if x != nil {
		return x.SelfParty
	}
	return ""
}

func (x *JoinNodeDetail) GetSelfRank() int64 {
	if x != nil {
		return x.SelfRank
	}
	return 0
}

func (x *JoinNodeDetail) GetSelfSize() int64 {
	if x != nil {
		return x.SelfSize
	}
	return 0
}

func (x *JoinNodeDetail) GetPeerSize() int64 {
	if x != nil {
		return x.PeerSize
	}
	return 0
}

func (x *JoinNodeDetail) GetResultSize() int64 {
	if x != nil {
		return x.ResultSize
	}
	return 0
}

func (x *JoinNodeDetail) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

func (x *JoinNodeDetail) GetPartyCodes() []string {
	if x != nil {
		return x.PartyCodes
	}
	return nil
}

type InNodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName   string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	SelfParty  string   `protobuf:"bytes,2,opt,name=self_party,json=selfParty,proto3" json:"self_party,omitempty"`
	RevealTo   string   `protobuf:"bytes,3,opt,name=reveal_to,json=revealTo,proto3" json:"reveal_to,omitempty"`
	SelfSize   int64    `protobuf:"varint,4,opt,name=self_size,json=selfSize,proto3" json:"self_size,omitempty"`       // only works when reveal to myself
	PeerSize   int64    `protobuf:"varint,5,opt,name=peer_size,json=peerSize,proto3" json:"peer_size,omitempty"`       // only works when reveal to myself
	ResultSize int64    `protobuf:"varint,6,opt,name=result_size,json=resultSize,proto3" json:"result_size,omitempty"` // only works when reveal to myself
	PartyCodes []string `protobuf:"bytes,7,rep,name=party_codes,json=partyCodes,proto3" json:"party_codes,omitempty"`
	CostTime   int64    `protobuf:"varint,8,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"` // unit: ms
}

func (x *InNodeDetail) Reset() {
	*x = InNodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_audit_audit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InNodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InNodeDetail) ProtoMessage() {}

func (x *InNodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_engine_audit_audit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InNodeDetail.ProtoReflect.Descriptor instead.
func (*InNodeDetail) Descriptor() ([]byte, []int) {
	return file_engine_audit_audit_proto_rawDescGZIP(), []int{7}
}

func (x *InNodeDetail) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *InNodeDetail) GetSelfParty() string {
	if x != nil {
		return x.SelfParty
	}
	return ""
}

func (x *InNodeDetail) GetRevealTo() string {
	if x != nil {
		return x.RevealTo
	}
	return ""
}

func (x *InNodeDetail) GetSelfSize() int64 {
	if x != nil {
		return x.SelfSize
	}
	return 0
}

func (x *InNodeDetail) GetPeerSize() int64 {
	if x != nil {
		return x.PeerSize
	}
	return 0
}

func (x *InNodeDetail) GetResultSize() int64 {
	if x != nil {
		return x.ResultSize
	}
	return 0
}

func (x *InNodeDetail) GetPartyCodes() []string {
	if x != nil {
		return x.PartyCodes
	}
	return nil
}

func (x *InNodeDetail) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type SqlNodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName   string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Query      string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	NumRows    int64  `protobuf:"varint,3,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	NumColumns int64  `protobuf:"varint,4,opt,name=num_columns,json=numColumns,proto3" json:"num_columns,omitempty"`
	CostTime   int64  `protobuf:"varint,5,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"` // unit: ms
}

func (x *SqlNodeDetail) Reset() {
	*x = SqlNodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_audit_audit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlNodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlNodeDetail) ProtoMessage() {}

func (x *SqlNodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_engine_audit_audit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlNodeDetail.ProtoReflect.Descriptor instead.
func (*SqlNodeDetail) Descriptor() ([]byte, []int) {
	return file_engine_audit_audit_proto_rawDescGZIP(), []int{8}
}

func (x *SqlNodeDetail) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *SqlNodeDetail) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SqlNodeDetail) GetNumRows() int64 {
	if x != nil {
		return x.NumRows
	}
	return 0
}

func (x *SqlNodeDetail) GetNumColumns() int64 {
	if x != nil {
		return x.NumColumns
	}
	return 0
}

func (x *SqlNodeDetail) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type PublishNodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	NumRows  int64  `protobuf:"varint,2,opt,name=num_rows,json=numRows,proto3" json:"num_rows,omitempty"`
	CostTime int64  `protobuf:"varint,3,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"` // unit: ms
}

func (x *PublishNodeDetail) Reset() {
	*x = PublishNodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_audit_audit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishNodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishNodeDetail) ProtoMessage() {}

func (x *PublishNodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_engine_audit_audit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishNodeDetail.ProtoReflect.Descriptor instead.
func (*PublishNodeDetail) Descriptor() ([]byte, []int) {
	return file_engine_audit_audit_proto_rawDescGZIP(), []int{9}
}

func (x *PublishNodeDetail) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *PublishNodeDetail) GetNumRows() int64 {
	if x != nil {
		return x.NumRows
	}
	return 0
}

func (x *PublishNodeDetail) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type DumpFileNodeDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName     string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	FilePath     string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	AffectedRows int64  `protobuf:"varint,3,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
	CostTime     int64  `protobuf:"varint,4,opt,name=cost_time,json=costTime,proto3" json:"cost_time,omitempty"` // unit: ms
}

func (x *DumpFileNodeDetail) Reset() {
	*x = DumpFileNodeDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_audit_audit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpFileNodeDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpFileNodeDetail) ProtoMessage() {}

func (x *DumpFileNodeDetail) ProtoReflect() protoreflect.Message {
	mi := &file_engine_audit_audit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpFileNodeDetail.ProtoReflect.Descriptor instead.
func (*DumpFileNodeDetail) Descriptor() ([]byte, []int) {
	return file_engine_audit_audit_proto_rawDescGZIP(), []int{10}
}

func (x *DumpFileNodeDetail) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *DumpFileNodeDetail) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *DumpFileNodeDetail) GetAffectedRows() int64 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

func (x *DumpFileNodeDetail) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

var File_engine_audit_audit_proto protoreflect.FileDescriptor

var file_engine_audit_audit_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x63, 0x71, 0x6c,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x1a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x65, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x2d, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x63, 0x71,
	0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x9f, 0x05, 0x0a, 0x09, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07,
	0x72, 0x75, 0x6e, 0x5f, 0x64, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x53,
	0x75, 0x62, 0x44, 0x61, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x75,
	0x6e, 0x44, 0x61, 0x67, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x6c, 0x61, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x48, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x48, 0x00, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38,
	0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x71, 0x6c, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x73, 0x71, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x71,
	0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x75, 0x6d, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x52,
	0x75, 0x6e, 0x53, 0x75, 0x62, 0x44, 0x61, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xa2, 0x01, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x50, 0x6c, 0x61, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x77, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x3b, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x47, 0x0a, 0x10, 0x53, 0x74, 0x6f,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x70, 0x22, 0x82, 0x02, 0x0a, 0x0e, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x5f, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x54,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x53,
	0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75,
	0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75,
	0x6d, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x44, 0x75, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x9a, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x63,
	0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73,
	0x63, 0x71, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0xa2, 0x02, 0x03, 0x53, 0x45, 0x58, 0xaa, 0x02, 0x0b,
	0x53, 0x63, 0x71, 0x6c, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0xca, 0x02, 0x0b, 0x53, 0x63,
	0x71, 0x6c, 0x5c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0xe2, 0x02, 0x17, 0x53, 0x63, 0x71, 0x6c,
	0x5c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x53, 0x63, 0x71, 0x6c, 0x3a, 0x3a, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_engine_audit_audit_proto_rawDescOnce sync.Once
	file_engine_audit_audit_proto_rawDescData = file_engine_audit_audit_proto_rawDesc
)

func file_engine_audit_audit_proto_rawDescGZIP() []byte {
	file_engine_audit_audit_proto_rawDescOnce.Do(func() {
		file_engine_audit_audit_proto_rawDescData = protoimpl.X.CompressGZIP(file_engine_audit_audit_proto_rawDescData)
	})
	return file_engine_audit_audit_proto_rawDescData
}

var file_engine_audit_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_engine_audit_audit_proto_goTypes = []interface{}{
	(*AuditLog)(nil),                 // 0: scql.engine.AuditLog
	(*AuditBody)(nil),                // 1: scql.engine.AuditBody
	(*RunSubDagEvent)(nil),           // 2: scql.engine.RunSubDagEvent
	(*RunExecPlanEvent)(nil),         // 3: scql.engine.RunExecPlanEvent
	(*CreateSessionEvent)(nil),       // 4: scql.engine.CreateSessionEvent
	(*StopSessionEvent)(nil),         // 5: scql.engine.StopSessionEvent
	(*JoinNodeDetail)(nil),           // 6: scql.engine.JoinNodeDetail
	(*InNodeDetail)(nil),             // 7: scql.engine.InNodeDetail
	(*SqlNodeDetail)(nil),            // 8: scql.engine.SqlNodeDetail
	(*PublishNodeDetail)(nil),        // 9: scql.engine.PublishNodeDetail
	(*DumpFileNodeDetail)(nil),       // 10: scql.engine.DumpFileNodeDetail
	(*audit.AuditHeader)(nil),        // 11: audit.pb.AuditHeader
	(*audit.UncategorizedEvent)(nil), // 12: audit.pb.UncategorizedEvent
	(*audit.NodeInfo)(nil),           // 13: audit.pb.NodeInfo
	(*api.SessionStartParams)(nil),   // 14: scql.pb.SessionStartParams
}
var file_engine_audit_audit_proto_depIdxs = []int32{
	11, // 0: scql.engine.AuditLog.header:type_name -> audit.pb.AuditHeader
	1,  // 1: scql.engine.AuditLog.body:type_name -> scql.engine.AuditBody
	12, // 2: scql.engine.AuditBody.uncategorized:type_name -> audit.pb.UncategorizedEvent
	2,  // 3: scql.engine.AuditBody.run_dag:type_name -> scql.engine.RunSubDagEvent
	3,  // 4: scql.engine.AuditBody.run_plan:type_name -> scql.engine.RunExecPlanEvent
	4,  // 5: scql.engine.AuditBody.create_session:type_name -> scql.engine.CreateSessionEvent
	5,  // 6: scql.engine.AuditBody.stop_session:type_name -> scql.engine.StopSessionEvent
	6,  // 7: scql.engine.AuditBody.join_detail:type_name -> scql.engine.JoinNodeDetail
	7,  // 8: scql.engine.AuditBody.in_detail:type_name -> scql.engine.InNodeDetail
	8,  // 9: scql.engine.AuditBody.sql_detail:type_name -> scql.engine.SqlNodeDetail
	10, // 10: scql.engine.AuditBody.dump_detail:type_name -> scql.engine.DumpFileNodeDetail
	9,  // 11: scql.engine.AuditBody.publish_detail:type_name -> scql.engine.PublishNodeDetail
	13, // 12: scql.engine.RunSubDagEvent.node_list:type_name -> audit.pb.NodeInfo
	13, // 13: scql.engine.RunExecPlanEvent.node_list:type_name -> audit.pb.NodeInfo
	14, // 14: scql.engine.CreateSessionEvent.parameters:type_name -> scql.pb.SessionStartParams
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_engine_audit_audit_proto_init() }
func file_engine_audit_audit_proto_init() {
	if File_engine_audit_audit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_engine_audit_audit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_audit_audit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_audit_audit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSubDagEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_audit_audit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunExecPlanEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_audit_audit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_audit_audit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSessionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_audit_audit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinNodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_audit_audit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InNodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_audit_audit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlNodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_audit_audit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishNodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_audit_audit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpFileNodeDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_engine_audit_audit_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AuditBody_Uncategorized)(nil),
		(*AuditBody_RunDag)(nil),
		(*AuditBody_RunPlan)(nil),
		(*AuditBody_CreateSession)(nil),
		(*AuditBody_StopSession)(nil),
		(*AuditBody_JoinDetail)(nil),
		(*AuditBody_InDetail)(nil),
		(*AuditBody_SqlDetail)(nil),
		(*AuditBody_DumpDetail)(nil),
		(*AuditBody_PublishDetail)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_engine_audit_audit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_engine_audit_audit_proto_goTypes,
		DependencyIndexes: file_engine_audit_audit_proto_depIdxs,
		MessageInfos:      file_engine_audit_audit_proto_msgTypes,
	}.Build()
	File_engine_audit_audit_proto = out.File
	file_engine_audit_audit_proto_rawDesc = nil
	file_engine_audit_audit_proto_goTypes = nil
	file_engine_audit_audit_proto_depIdxs = nil
}
