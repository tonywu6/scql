// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/engine.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SCQLEngineService_RunExecutionPlan_FullMethodName = "/scql.pb.SCQLEngineService/RunExecutionPlan"
	SCQLEngineService_StopSession_FullMethodName      = "/scql.pb.SCQLEngineService/StopSession"
)

// SCQLEngineServiceClient is the client API for SCQLEngineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SCQLEngineServiceClient interface {
	// Run the whole execution plan
	RunExecutionPlan(ctx context.Context, in *RunExecutionPlanRequest, opts ...grpc.CallOption) (*RunExecutionPlanResponse, error)
	// Stop session
	StopSession(ctx context.Context, in *StopSessionRequest, opts ...grpc.CallOption) (*Status, error)
}

type sCQLEngineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSCQLEngineServiceClient(cc grpc.ClientConnInterface) SCQLEngineServiceClient {
	return &sCQLEngineServiceClient{cc}
}

func (c *sCQLEngineServiceClient) RunExecutionPlan(ctx context.Context, in *RunExecutionPlanRequest, opts ...grpc.CallOption) (*RunExecutionPlanResponse, error) {
	out := new(RunExecutionPlanResponse)
	err := c.cc.Invoke(ctx, SCQLEngineService_RunExecutionPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCQLEngineServiceClient) StopSession(ctx context.Context, in *StopSessionRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, SCQLEngineService_StopSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SCQLEngineServiceServer is the server API for SCQLEngineService service.
// All implementations must embed UnimplementedSCQLEngineServiceServer
// for forward compatibility
type SCQLEngineServiceServer interface {
	// Run the whole execution plan
	RunExecutionPlan(context.Context, *RunExecutionPlanRequest) (*RunExecutionPlanResponse, error)
	// Stop session
	StopSession(context.Context, *StopSessionRequest) (*Status, error)
	mustEmbedUnimplementedSCQLEngineServiceServer()
}

// UnimplementedSCQLEngineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSCQLEngineServiceServer struct {
}

func (UnimplementedSCQLEngineServiceServer) RunExecutionPlan(context.Context, *RunExecutionPlanRequest) (*RunExecutionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunExecutionPlan not implemented")
}
func (UnimplementedSCQLEngineServiceServer) StopSession(context.Context, *StopSessionRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSession not implemented")
}
func (UnimplementedSCQLEngineServiceServer) mustEmbedUnimplementedSCQLEngineServiceServer() {}

// UnsafeSCQLEngineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SCQLEngineServiceServer will
// result in compilation errors.
type UnsafeSCQLEngineServiceServer interface {
	mustEmbedUnimplementedSCQLEngineServiceServer()
}

func RegisterSCQLEngineServiceServer(s grpc.ServiceRegistrar, srv SCQLEngineServiceServer) {
	s.RegisterService(&SCQLEngineService_ServiceDesc, srv)
}

func _SCQLEngineService_RunExecutionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunExecutionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCQLEngineServiceServer).RunExecutionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SCQLEngineService_RunExecutionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCQLEngineServiceServer).RunExecutionPlan(ctx, req.(*RunExecutionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCQLEngineService_StopSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCQLEngineServiceServer).StopSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SCQLEngineService_StopSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCQLEngineServiceServer).StopSession(ctx, req.(*StopSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SCQLEngineService_ServiceDesc is the grpc.ServiceDesc for SCQLEngineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SCQLEngineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scql.pb.SCQLEngineService",
	HandlerType: (*SCQLEngineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunExecutionPlan",
			Handler:    _SCQLEngineService_RunExecutionPlan_Handler,
		},
		{
			MethodName: "StopSession",
			Handler:    _SCQLEngineService_StopSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/engine.proto",
}

const (
	EngineResultCallback_Report_FullMethodName = "/scql.pb.EngineResultCallback/Report"
)

// EngineResultCallbackClient is the client API for EngineResultCallback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineResultCallbackClient interface {
	// Engine report the RunDag result to scdb/broker/...
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type engineResultCallbackClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineResultCallbackClient(cc grpc.ClientConnInterface) EngineResultCallbackClient {
	return &engineResultCallbackClient{cc}
}

func (c *engineResultCallbackClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EngineResultCallback_Report_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineResultCallbackServer is the server API for EngineResultCallback service.
// All implementations must embed UnimplementedEngineResultCallbackServer
// for forward compatibility
type EngineResultCallbackServer interface {
	// Engine report the RunDag result to scdb/broker/...
	Report(context.Context, *ReportRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEngineResultCallbackServer()
}

// UnimplementedEngineResultCallbackServer must be embedded to have forward compatible implementations.
type UnimplementedEngineResultCallbackServer struct {
}

func (UnimplementedEngineResultCallbackServer) Report(context.Context, *ReportRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedEngineResultCallbackServer) mustEmbedUnimplementedEngineResultCallbackServer() {}

// UnsafeEngineResultCallbackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineResultCallbackServer will
// result in compilation errors.
type UnsafeEngineResultCallbackServer interface {
	mustEmbedUnimplementedEngineResultCallbackServer()
}

func RegisterEngineResultCallbackServer(s grpc.ServiceRegistrar, srv EngineResultCallbackServer) {
	s.RegisterService(&EngineResultCallback_ServiceDesc, srv)
}

func _EngineResultCallback_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineResultCallbackServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineResultCallback_Report_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineResultCallbackServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EngineResultCallback_ServiceDesc is the grpc.ServiceDesc for EngineResultCallback service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngineResultCallback_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scql.pb.EngineResultCallback",
	HandlerType: (*EngineResultCallbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _EngineResultCallback_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/engine.proto",
}
