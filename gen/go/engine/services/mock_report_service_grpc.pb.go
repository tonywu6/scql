//
// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: engine/services/mock_report_service.proto

package services

import (
	context "context"
	api "github.com/secretflow/scql/gen/go/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MockReportService_Report_FullMethodName = "/scql.engine.services.pb.MockReportService/Report"
)

// MockReportServiceClient is the client API for MockReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MockReportServiceClient interface {
	// push the data to receiver's local database.
	Report(ctx context.Context, in *api.ReportRequest, opts ...grpc.CallOption) (*MockResponse, error)
}

type mockReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMockReportServiceClient(cc grpc.ClientConnInterface) MockReportServiceClient {
	return &mockReportServiceClient{cc}
}

func (c *mockReportServiceClient) Report(ctx context.Context, in *api.ReportRequest, opts ...grpc.CallOption) (*MockResponse, error) {
	out := new(MockResponse)
	err := c.cc.Invoke(ctx, MockReportService_Report_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockReportServiceServer is the server API for MockReportService service.
// All implementations must embed UnimplementedMockReportServiceServer
// for forward compatibility
type MockReportServiceServer interface {
	// push the data to receiver's local database.
	Report(context.Context, *api.ReportRequest) (*MockResponse, error)
	mustEmbedUnimplementedMockReportServiceServer()
}

// UnimplementedMockReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMockReportServiceServer struct {
}

func (UnimplementedMockReportServiceServer) Report(context.Context, *api.ReportRequest) (*MockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedMockReportServiceServer) mustEmbedUnimplementedMockReportServiceServer() {}

// UnsafeMockReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockReportServiceServer will
// result in compilation errors.
type UnsafeMockReportServiceServer interface {
	mustEmbedUnimplementedMockReportServiceServer()
}

func RegisterMockReportServiceServer(s grpc.ServiceRegistrar, srv MockReportServiceServer) {
	s.RegisterService(&MockReportService_ServiceDesc, srv)
}

func _MockReportService_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockReportServiceServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockReportService_Report_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockReportServiceServer).Report(ctx, req.(*api.ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MockReportService_ServiceDesc is the grpc.ServiceDesc for MockReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MockReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scql.engine.services.pb.MockReportService",
	HandlerType: (*MockReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _MockReportService_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engine/services/mock_report_service.proto",
}
