//
// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: engine/link/mux_receiver.proto

package link

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransType int32

const (
	TransType_MONO    TransType = 0
	TransType_CHUNKED TransType = 1
)

// Enum value maps for TransType.
var (
	TransType_name = map[int32]string{
		0: "MONO",
		1: "CHUNKED",
	}
	TransType_value = map[string]int32{
		"MONO":    0,
		"CHUNKED": 1,
	}
)

func (x TransType) Enum() *TransType {
	p := new(TransType)
	*p = x
	return p
}

func (x TransType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransType) Descriptor() protoreflect.EnumDescriptor {
	return file_engine_link_mux_receiver_proto_enumTypes[0].Descriptor()
}

func (TransType) Type() protoreflect.EnumType {
	return &file_engine_link_mux_receiver_proto_enumTypes[0]
}

func (x TransType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransType.Descriptor instead.
func (TransType) EnumDescriptor() ([]byte, []int) {
	return file_engine_link_mux_receiver_proto_rawDescGZIP(), []int{0}
}

type ErrorCode int32

const (
	ErrorCode_SUCCESS          ErrorCode = 0
	ErrorCode_UNEXPECTED_ERROR ErrorCode = 1
	ErrorCode_INVALID_REQUEST  ErrorCode = 2
	ErrorCode_INVALID_RESOURCE ErrorCode = 3
	ErrorCode_NETWORK_ERROR    ErrorCode = 4
	ErrorCode_LINKID_NOT_FOUND ErrorCode = 5
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "SUCCESS",
		1: "UNEXPECTED_ERROR",
		2: "INVALID_REQUEST",
		3: "INVALID_RESOURCE",
		4: "NETWORK_ERROR",
		5: "LINKID_NOT_FOUND",
	}
	ErrorCode_value = map[string]int32{
		"SUCCESS":          0,
		"UNEXPECTED_ERROR": 1,
		"INVALID_REQUEST":  2,
		"INVALID_RESOURCE": 3,
		"NETWORK_ERROR":    4,
		"LINKID_NOT_FOUND": 5,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_engine_link_mux_receiver_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_engine_link_mux_receiver_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_engine_link_mux_receiver_proto_rawDescGZIP(), []int{1}
}

type MuxPushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid, for multi link context multiplexing
	// usually, it is session id
	LinkId string   `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	Msg    *Message `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *MuxPushRequest) Reset() {
	*x = MuxPushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_link_mux_receiver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuxPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuxPushRequest) ProtoMessage() {}

func (x *MuxPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_engine_link_mux_receiver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuxPushRequest.ProtoReflect.Descriptor instead.
func (*MuxPushRequest) Descriptor() ([]byte, []int) {
	return file_engine_link_mux_receiver_proto_rawDescGZIP(), []int{0}
}

func (x *MuxPushRequest) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *MuxPushRequest) GetMsg() *Message {
	if x != nil {
		return x.Msg
	}
	return nil
}

type MuxPushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=scql.engine.link.pb.ErrorCode" json:"error_code,omitempty"`
	ErrorMsg  string    `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *MuxPushResponse) Reset() {
	*x = MuxPushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_link_mux_receiver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuxPushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuxPushResponse) ProtoMessage() {}

func (x *MuxPushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_link_mux_receiver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuxPushResponse.ProtoReflect.Descriptor instead.
func (*MuxPushResponse) Descriptor() ([]byte, []int) {
	return file_engine_link_mux_receiver_proto_rawDescGZIP(), []int{1}
}

func (x *MuxPushResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_SUCCESS
}

func (x *MuxPushResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

// Message pushed to receiver
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderRank uint64 `protobuf:"varint,1,opt,name=sender_rank,json=senderRank,proto3" json:"sender_rank,omitempty"`
	// key of the message.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// value of the message.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// chunk related.
	TransType TransType  `protobuf:"varint,4,opt,name=trans_type,json=transType,proto3,enum=scql.engine.link.pb.TransType" json:"trans_type,omitempty"`
	ChunkInfo *ChunkInfo `protobuf:"bytes,5,opt,name=chunk_info,json=chunkInfo,proto3" json:"chunk_info,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_link_mux_receiver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_engine_link_mux_receiver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_engine_link_mux_receiver_proto_rawDescGZIP(), []int{2}
}

func (x *Message) GetSenderRank() uint64 {
	if x != nil {
		return x.SenderRank
	}
	return 0
}

func (x *Message) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Message) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Message) GetTransType() TransType {
	if x != nil {
		return x.TransType
	}
	return TransType_MONO
}

func (x *Message) GetChunkInfo() *ChunkInfo {
	if x != nil {
		return x.ChunkInfo
	}
	return nil
}

type ChunkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageLength uint64 `protobuf:"varint,1,opt,name=message_length,json=messageLength,proto3" json:"message_length,omitempty"`
	ChunkOffset   uint64 `protobuf:"varint,2,opt,name=chunk_offset,json=chunkOffset,proto3" json:"chunk_offset,omitempty"`
}

func (x *ChunkInfo) Reset() {
	*x = ChunkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_link_mux_receiver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfo) ProtoMessage() {}

func (x *ChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_engine_link_mux_receiver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfo.ProtoReflect.Descriptor instead.
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return file_engine_link_mux_receiver_proto_rawDescGZIP(), []int{3}
}

func (x *ChunkInfo) GetMessageLength() uint64 {
	if x != nil {
		return x.MessageLength
	}
	return 0
}

func (x *ChunkInfo) GetChunkOffset() uint64 {
	if x != nil {
		return x.ChunkOffset
	}
	return 0
}

var File_engine_link_mux_receiver_proto protoreflect.FileDescriptor

var file_engine_link_mux_receiver_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x6d, 0x75,
	0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x70, 0x62, 0x22, 0x59, 0x0a, 0x0e, 0x4d, 0x75, 0x78, 0x50, 0x75, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x6d, 0x0a, 0x0f, 0x4d, 0x75, 0x78, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22,
	0xd0, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x55, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2a, 0x22, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x4e, 0x4f, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x82, 0x01,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x45, 0x58,
	0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x49, 0x4e, 0x4b, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x05, 0x32, 0x67, 0x0a, 0x12, 0x4d, 0x75, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x23, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x78, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x78, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xcd, 0x01, 0x0a, 0x17,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x63, 0x71, 0x6c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x62, 0x42, 0x10, 0x4d, 0x75, 0x78, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x73, 0x63, 0x71, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x80, 0x01, 0x01, 0xa2, 0x02, 0x04,
	0x53, 0x45, 0x4c, 0x50, 0xaa, 0x02, 0x13, 0x53, 0x63, 0x71, 0x6c, 0x2e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x50, 0x62, 0xca, 0x02, 0x13, 0x53, 0x63, 0x71,
	0x6c, 0x5c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x4c, 0x69, 0x6e, 0x6b, 0x5c, 0x50, 0x62,
	0xe2, 0x02, 0x1f, 0x53, 0x63, 0x71, 0x6c, 0x5c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5c, 0x4c,
	0x69, 0x6e, 0x6b, 0x5c, 0x50, 0x62, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x16, 0x53, 0x63, 0x71, 0x6c, 0x3a, 0x3a, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x3a, 0x3a, 0x4c, 0x69, 0x6e, 0x6b, 0x3a, 0x3a, 0x50, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_engine_link_mux_receiver_proto_rawDescOnce sync.Once
	file_engine_link_mux_receiver_proto_rawDescData = file_engine_link_mux_receiver_proto_rawDesc
)

func file_engine_link_mux_receiver_proto_rawDescGZIP() []byte {
	file_engine_link_mux_receiver_proto_rawDescOnce.Do(func() {
		file_engine_link_mux_receiver_proto_rawDescData = protoimpl.X.CompressGZIP(file_engine_link_mux_receiver_proto_rawDescData)
	})
	return file_engine_link_mux_receiver_proto_rawDescData
}

var file_engine_link_mux_receiver_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_engine_link_mux_receiver_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_engine_link_mux_receiver_proto_goTypes = []interface{}{
	(TransType)(0),          // 0: scql.engine.link.pb.TransType
	(ErrorCode)(0),          // 1: scql.engine.link.pb.ErrorCode
	(*MuxPushRequest)(nil),  // 2: scql.engine.link.pb.MuxPushRequest
	(*MuxPushResponse)(nil), // 3: scql.engine.link.pb.MuxPushResponse
	(*Message)(nil),         // 4: scql.engine.link.pb.Message
	(*ChunkInfo)(nil),       // 5: scql.engine.link.pb.ChunkInfo
}
var file_engine_link_mux_receiver_proto_depIdxs = []int32{
	4, // 0: scql.engine.link.pb.MuxPushRequest.msg:type_name -> scql.engine.link.pb.Message
	1, // 1: scql.engine.link.pb.MuxPushResponse.error_code:type_name -> scql.engine.link.pb.ErrorCode
	0, // 2: scql.engine.link.pb.Message.trans_type:type_name -> scql.engine.link.pb.TransType
	5, // 3: scql.engine.link.pb.Message.chunk_info:type_name -> scql.engine.link.pb.ChunkInfo
	2, // 4: scql.engine.link.pb.MuxReceiverService.Push:input_type -> scql.engine.link.pb.MuxPushRequest
	3, // 5: scql.engine.link.pb.MuxReceiverService.Push:output_type -> scql.engine.link.pb.MuxPushResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_engine_link_mux_receiver_proto_init() }
func file_engine_link_mux_receiver_proto_init() {
	if File_engine_link_mux_receiver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_engine_link_mux_receiver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuxPushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_link_mux_receiver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuxPushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_link_mux_receiver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_link_mux_receiver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_engine_link_mux_receiver_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_engine_link_mux_receiver_proto_goTypes,
		DependencyIndexes: file_engine_link_mux_receiver_proto_depIdxs,
		EnumInfos:         file_engine_link_mux_receiver_proto_enumTypes,
		MessageInfos:      file_engine_link_mux_receiver_proto_msgTypes,
	}.Build()
	File_engine_link_mux_receiver_proto = out.File
	file_engine_link_mux_receiver_proto_rawDesc = nil
	file_engine_link_mux_receiver_proto_goTypes = nil
	file_engine_link_mux_receiver_proto_depIdxs = nil
}
