//
// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: engine/link/mux_receiver.proto

package link

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MuxReceiverService_Push_FullMethodName = "/scql.engine.link.pb.MuxReceiverService/Push"
)

// MuxReceiverServiceClient is the client API for MuxReceiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MuxReceiverServiceClient interface {
	// push the data to receiver's local database.
	Push(ctx context.Context, in *MuxPushRequest, opts ...grpc.CallOption) (*MuxPushResponse, error)
}

type muxReceiverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMuxReceiverServiceClient(cc grpc.ClientConnInterface) MuxReceiverServiceClient {
	return &muxReceiverServiceClient{cc}
}

func (c *muxReceiverServiceClient) Push(ctx context.Context, in *MuxPushRequest, opts ...grpc.CallOption) (*MuxPushResponse, error) {
	out := new(MuxPushResponse)
	err := c.cc.Invoke(ctx, MuxReceiverService_Push_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MuxReceiverServiceServer is the server API for MuxReceiverService service.
// All implementations must embed UnimplementedMuxReceiverServiceServer
// for forward compatibility
type MuxReceiverServiceServer interface {
	// push the data to receiver's local database.
	Push(context.Context, *MuxPushRequest) (*MuxPushResponse, error)
	mustEmbedUnimplementedMuxReceiverServiceServer()
}

// UnimplementedMuxReceiverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMuxReceiverServiceServer struct {
}

func (UnimplementedMuxReceiverServiceServer) Push(context.Context, *MuxPushRequest) (*MuxPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedMuxReceiverServiceServer) mustEmbedUnimplementedMuxReceiverServiceServer() {}

// UnsafeMuxReceiverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MuxReceiverServiceServer will
// result in compilation errors.
type UnsafeMuxReceiverServiceServer interface {
	mustEmbedUnimplementedMuxReceiverServiceServer()
}

func RegisterMuxReceiverServiceServer(s grpc.ServiceRegistrar, srv MuxReceiverServiceServer) {
	s.RegisterService(&MuxReceiverService_ServiceDesc, srv)
}

func _MuxReceiverService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuxPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MuxReceiverServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MuxReceiverService_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MuxReceiverServiceServer).Push(ctx, req.(*MuxPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MuxReceiverService_ServiceDesc is the grpc.ServiceDesc for MuxReceiverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MuxReceiverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scql.engine.link.pb.MuxReceiverService",
	HandlerType: (*MuxReceiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _MuxReceiverService_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engine/link/mux_receiver.proto",
}
