// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/interpreter.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InterpreterService_CompileQuery_FullMethodName = "/scql.pb.InterpreterService/CompileQuery"
)

// InterpreterServiceClient is the client API for InterpreterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterpreterServiceClient interface {
	CompileQuery(ctx context.Context, in *CompileQueryRequest, opts ...grpc.CallOption) (*CompileQueryResponse, error)
}

type interpreterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterpreterServiceClient(cc grpc.ClientConnInterface) InterpreterServiceClient {
	return &interpreterServiceClient{cc}
}

func (c *interpreterServiceClient) CompileQuery(ctx context.Context, in *CompileQueryRequest, opts ...grpc.CallOption) (*CompileQueryResponse, error) {
	out := new(CompileQueryResponse)
	err := c.cc.Invoke(ctx, InterpreterService_CompileQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterpreterServiceServer is the server API for InterpreterService service.
// All implementations must embed UnimplementedInterpreterServiceServer
// for forward compatibility
type InterpreterServiceServer interface {
	CompileQuery(context.Context, *CompileQueryRequest) (*CompileQueryResponse, error)
	mustEmbedUnimplementedInterpreterServiceServer()
}

// UnimplementedInterpreterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterpreterServiceServer struct {
}

func (UnimplementedInterpreterServiceServer) CompileQuery(context.Context, *CompileQueryRequest) (*CompileQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileQuery not implemented")
}
func (UnimplementedInterpreterServiceServer) mustEmbedUnimplementedInterpreterServiceServer() {}

// UnsafeInterpreterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterpreterServiceServer will
// result in compilation errors.
type UnsafeInterpreterServiceServer interface {
	mustEmbedUnimplementedInterpreterServiceServer()
}

func RegisterInterpreterServiceServer(s grpc.ServiceRegistrar, srv InterpreterServiceServer) {
	s.RegisterService(&InterpreterService_ServiceDesc, srv)
}

func _InterpreterService_CompileQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterpreterServiceServer).CompileQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterpreterService_CompileQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterpreterServiceServer).CompileQuery(ctx, req.(*CompileQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterpreterService_ServiceDesc is the grpc.ServiceDesc for InterpreterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterpreterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scql.pb.InterpreterService",
	HandlerType: (*InterpreterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompileQuery",
			Handler:    _InterpreterService_CompileQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/interpreter.proto",
}
