// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/broker.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IntraBrokerService_DoQuery_FullMethodName           = "/scql.pb.IntraBrokerService/DoQuery"
	IntraBrokerService_SubmitQuery_FullMethodName       = "/scql.pb.IntraBrokerService/SubmitQuery"
	IntraBrokerService_FetchResult_FullMethodName       = "/scql.pb.IntraBrokerService/FetchResult"
	IntraBrokerService_CreateProject_FullMethodName     = "/scql.pb.IntraBrokerService/CreateProject"
	IntraBrokerService_UpdateProject_FullMethodName     = "/scql.pb.IntraBrokerService/UpdateProject"
	IntraBrokerService_ListProjects_FullMethodName      = "/scql.pb.IntraBrokerService/ListProjects"
	IntraBrokerService_ArchiveProject_FullMethodName    = "/scql.pb.IntraBrokerService/ArchiveProject"
	IntraBrokerService_InviteMember_FullMethodName      = "/scql.pb.IntraBrokerService/InviteMember"
	IntraBrokerService_ListInvitations_FullMethodName   = "/scql.pb.IntraBrokerService/ListInvitations"
	IntraBrokerService_ProcessInvitation_FullMethodName = "/scql.pb.IntraBrokerService/ProcessInvitation"
	IntraBrokerService_CreateTable_FullMethodName       = "/scql.pb.IntraBrokerService/CreateTable"
	IntraBrokerService_ListTables_FullMethodName        = "/scql.pb.IntraBrokerService/ListTables"
	IntraBrokerService_DropTable_FullMethodName         = "/scql.pb.IntraBrokerService/DropTable"
	IntraBrokerService_GrantCCL_FullMethodName          = "/scql.pb.IntraBrokerService/GrantCCL"
	IntraBrokerService_RevokeCCL_FullMethodName         = "/scql.pb.IntraBrokerService/RevokeCCL"
	IntraBrokerService_ShowCCL_FullMethodName           = "/scql.pb.IntraBrokerService/ShowCCL"
)

// IntraBrokerServiceClient is the client API for IntraBrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntraBrokerServiceClient interface {
	// Run Query synchronously and return query result if the query completes
	// within a specified timeout
	DoQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Run Query asynchronously
	SubmitQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
	// Fetch query result of asynchronous query
	FetchResult(ctx context.Context, in *FetchResultRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// List All Projects that have created and joined
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	ArchiveProject(ctx context.Context, in *ArchiveProjectRequest, opts ...grpc.CallOption) (*ArchiveProjectResponse, error)
	InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error)
	// List all unprocessed invitation
	ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error)
	ProcessInvitation(ctx context.Context, in *ProcessInvitationRequest, opts ...grpc.CallOption) (*ProcessInvitationResponse, error)
	// Table related API
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	// List all tables in specified project
	ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error)
	DropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTableResponse, error)
	// CCL related
	GrantCCL(ctx context.Context, in *GrantCCLRequest, opts ...grpc.CallOption) (*GrantCCLResponse, error)
	RevokeCCL(ctx context.Context, in *RevokeCCLRequest, opts ...grpc.CallOption) (*RevokeCCLResponse, error)
	ShowCCL(ctx context.Context, in *ShowCCLRequest, opts ...grpc.CallOption) (*ShowCCLResponse, error)
}

type intraBrokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntraBrokerServiceClient(cc grpc.ClientConnInterface) IntraBrokerServiceClient {
	return &intraBrokerServiceClient{cc}
}

func (c *intraBrokerServiceClient) DoQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_DoQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) SubmitQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_SubmitQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) FetchResult(ctx context.Context, in *FetchResultRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_FetchResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_ListProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) ArchiveProject(ctx context.Context, in *ArchiveProjectRequest, opts ...grpc.CallOption) (*ArchiveProjectResponse, error) {
	out := new(ArchiveProjectResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_ArchiveProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*InviteMemberResponse, error) {
	out := new(InviteMemberResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_InviteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) ListInvitations(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error) {
	out := new(ListInvitationsResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_ListInvitations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) ProcessInvitation(ctx context.Context, in *ProcessInvitationRequest, opts ...grpc.CallOption) (*ProcessInvitationResponse, error) {
	out := new(ProcessInvitationResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_ProcessInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_CreateTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error) {
	out := new(ListTablesResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_ListTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) DropTable(ctx context.Context, in *DropTableRequest, opts ...grpc.CallOption) (*DropTableResponse, error) {
	out := new(DropTableResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_DropTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) GrantCCL(ctx context.Context, in *GrantCCLRequest, opts ...grpc.CallOption) (*GrantCCLResponse, error) {
	out := new(GrantCCLResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_GrantCCL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) RevokeCCL(ctx context.Context, in *RevokeCCLRequest, opts ...grpc.CallOption) (*RevokeCCLResponse, error) {
	out := new(RevokeCCLResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_RevokeCCL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intraBrokerServiceClient) ShowCCL(ctx context.Context, in *ShowCCLRequest, opts ...grpc.CallOption) (*ShowCCLResponse, error) {
	out := new(ShowCCLResponse)
	err := c.cc.Invoke(ctx, IntraBrokerService_ShowCCL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntraBrokerServiceServer is the server API for IntraBrokerService service.
// All implementations must embed UnimplementedIntraBrokerServiceServer
// for forward compatibility
type IntraBrokerServiceServer interface {
	// Run Query synchronously and return query result if the query completes
	// within a specified timeout
	DoQuery(context.Context, *QueryRequest) (*QueryResponse, error)
	// Run Query asynchronously
	SubmitQuery(context.Context, *QueryRequest) (*SubmitResponse, error)
	// Fetch query result of asynchronous query
	FetchResult(context.Context, *FetchResultRequest) (*QueryResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// List All Projects that have created and joined
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	ArchiveProject(context.Context, *ArchiveProjectRequest) (*ArchiveProjectResponse, error)
	InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error)
	// List all unprocessed invitation
	ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error)
	ProcessInvitation(context.Context, *ProcessInvitationRequest) (*ProcessInvitationResponse, error)
	// Table related API
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	// List all tables in specified project
	ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error)
	DropTable(context.Context, *DropTableRequest) (*DropTableResponse, error)
	// CCL related
	GrantCCL(context.Context, *GrantCCLRequest) (*GrantCCLResponse, error)
	RevokeCCL(context.Context, *RevokeCCLRequest) (*RevokeCCLResponse, error)
	ShowCCL(context.Context, *ShowCCLRequest) (*ShowCCLResponse, error)
	mustEmbedUnimplementedIntraBrokerServiceServer()
}

// UnimplementedIntraBrokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntraBrokerServiceServer struct {
}

func (UnimplementedIntraBrokerServiceServer) DoQuery(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoQuery not implemented")
}
func (UnimplementedIntraBrokerServiceServer) SubmitQuery(context.Context, *QueryRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitQuery not implemented")
}
func (UnimplementedIntraBrokerServiceServer) FetchResult(context.Context, *FetchResultRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchResult not implemented")
}
func (UnimplementedIntraBrokerServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedIntraBrokerServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedIntraBrokerServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedIntraBrokerServiceServer) ArchiveProject(context.Context, *ArchiveProjectRequest) (*ArchiveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveProject not implemented")
}
func (UnimplementedIntraBrokerServiceServer) InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMember not implemented")
}
func (UnimplementedIntraBrokerServiceServer) ListInvitations(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvitations not implemented")
}
func (UnimplementedIntraBrokerServiceServer) ProcessInvitation(context.Context, *ProcessInvitationRequest) (*ProcessInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessInvitation not implemented")
}
func (UnimplementedIntraBrokerServiceServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedIntraBrokerServiceServer) ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedIntraBrokerServiceServer) DropTable(context.Context, *DropTableRequest) (*DropTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTable not implemented")
}
func (UnimplementedIntraBrokerServiceServer) GrantCCL(context.Context, *GrantCCLRequest) (*GrantCCLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantCCL not implemented")
}
func (UnimplementedIntraBrokerServiceServer) RevokeCCL(context.Context, *RevokeCCLRequest) (*RevokeCCLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCCL not implemented")
}
func (UnimplementedIntraBrokerServiceServer) ShowCCL(context.Context, *ShowCCLRequest) (*ShowCCLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCCL not implemented")
}
func (UnimplementedIntraBrokerServiceServer) mustEmbedUnimplementedIntraBrokerServiceServer() {}

// UnsafeIntraBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntraBrokerServiceServer will
// result in compilation errors.
type UnsafeIntraBrokerServiceServer interface {
	mustEmbedUnimplementedIntraBrokerServiceServer()
}

func RegisterIntraBrokerServiceServer(s grpc.ServiceRegistrar, srv IntraBrokerServiceServer) {
	s.RegisterService(&IntraBrokerService_ServiceDesc, srv)
}

func _IntraBrokerService_DoQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).DoQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_DoQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).DoQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_SubmitQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).SubmitQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_SubmitQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).SubmitQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_FetchResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).FetchResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_FetchResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).FetchResult(ctx, req.(*FetchResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_ArchiveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).ArchiveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_ArchiveProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).ArchiveProject(ctx, req.(*ArchiveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_InviteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).InviteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_InviteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).InviteMember(ctx, req.(*InviteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_ListInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).ListInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_ListInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).ListInvitations(ctx, req.(*ListInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_ProcessInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).ProcessInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_ProcessInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).ProcessInvitation(ctx, req.(*ProcessInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_CreateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_ListTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).ListTables(ctx, req.(*ListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).DropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_DropTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).DropTable(ctx, req.(*DropTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_GrantCCL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantCCLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).GrantCCL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_GrantCCL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).GrantCCL(ctx, req.(*GrantCCLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_RevokeCCL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCCLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).RevokeCCL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_RevokeCCL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).RevokeCCL(ctx, req.(*RevokeCCLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntraBrokerService_ShowCCL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCCLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntraBrokerServiceServer).ShowCCL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntraBrokerService_ShowCCL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntraBrokerServiceServer).ShowCCL(ctx, req.(*ShowCCLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntraBrokerService_ServiceDesc is the grpc.ServiceDesc for IntraBrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntraBrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scql.pb.IntraBrokerService",
	HandlerType: (*IntraBrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoQuery",
			Handler:    _IntraBrokerService_DoQuery_Handler,
		},
		{
			MethodName: "SubmitQuery",
			Handler:    _IntraBrokerService_SubmitQuery_Handler,
		},
		{
			MethodName: "FetchResult",
			Handler:    _IntraBrokerService_FetchResult_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _IntraBrokerService_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _IntraBrokerService_UpdateProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _IntraBrokerService_ListProjects_Handler,
		},
		{
			MethodName: "ArchiveProject",
			Handler:    _IntraBrokerService_ArchiveProject_Handler,
		},
		{
			MethodName: "InviteMember",
			Handler:    _IntraBrokerService_InviteMember_Handler,
		},
		{
			MethodName: "ListInvitations",
			Handler:    _IntraBrokerService_ListInvitations_Handler,
		},
		{
			MethodName: "ProcessInvitation",
			Handler:    _IntraBrokerService_ProcessInvitation_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _IntraBrokerService_CreateTable_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _IntraBrokerService_ListTables_Handler,
		},
		{
			MethodName: "DropTable",
			Handler:    _IntraBrokerService_DropTable_Handler,
		},
		{
			MethodName: "GrantCCL",
			Handler:    _IntraBrokerService_GrantCCL_Handler,
		},
		{
			MethodName: "RevokeCCL",
			Handler:    _IntraBrokerService_RevokeCCL_Handler,
		},
		{
			MethodName: "ShowCCL",
			Handler:    _IntraBrokerService_ShowCCL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/broker.proto",
}

const (
	InterBrokerService_DistributeQuery_FullMethodName = "/scql.pb.InterBrokerService/DistributeQuery"
	InterBrokerService_CancelQuery_FullMethodName     = "/scql.pb.InterBrokerService/CancelQuery"
	InterBrokerService_InviteToProject_FullMethodName = "/scql.pb.InterBrokerService/InviteToProject"
	InterBrokerService_ReplyInvitation_FullMethodName = "/scql.pb.InterBrokerService/ReplyInvitation"
	InterBrokerService_SyncInfo_FullMethodName        = "/scql.pb.InterBrokerService/SyncInfo"
	InterBrokerService_AskInfo_FullMethodName         = "/scql.pb.InterBrokerService/AskInfo"
	InterBrokerService_ExchangeJobInfo_FullMethodName = "/scql.pb.InterBrokerService/ExchangeJobInfo"
)

// InterBrokerServiceClient is the client API for InterBrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterBrokerServiceClient interface {
	// Distribute query task to other participants
	DistributeQuery(ctx context.Context, in *DistributeQueryRequest, opts ...grpc.CallOption) (*DistributeQueryResponse, error)
	CancelQuery(ctx context.Context, in *CancelQueryRequest, opts ...grpc.CallOption) (*CancelQueryResponse, error)
	// Project related
	InviteToProject(ctx context.Context, in *InviteToProjectRequest, opts ...grpc.CallOption) (*InviteToProjectResponse, error)
	ReplyInvitation(ctx context.Context, in *ReplyInvitationRequest, opts ...grpc.CallOption) (*ReplyInvitationResponse, error)
	// sync new table & ccl settings
	SyncInfo(ctx context.Context, in *SyncInfoRequest, opts ...grpc.CallOption) (*SyncInfoResponse, error)
	// ask information (project settings/table schema/ccl settings)
	AskInfo(ctx context.Context, in *AskInfoRequest, opts ...grpc.CallOption) (*AskInfoResponse, error)
	// sync job running info. Currently ask endpoint of peer engine(not issuer),
	// for three parties job
	// warning: not need in two parties job
	ExchangeJobInfo(ctx context.Context, in *ExchangeJobInfoRequest, opts ...grpc.CallOption) (*ExchangeJobInfoResponse, error)
}

type interBrokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterBrokerServiceClient(cc grpc.ClientConnInterface) InterBrokerServiceClient {
	return &interBrokerServiceClient{cc}
}

func (c *interBrokerServiceClient) DistributeQuery(ctx context.Context, in *DistributeQueryRequest, opts ...grpc.CallOption) (*DistributeQueryResponse, error) {
	out := new(DistributeQueryResponse)
	err := c.cc.Invoke(ctx, InterBrokerService_DistributeQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interBrokerServiceClient) CancelQuery(ctx context.Context, in *CancelQueryRequest, opts ...grpc.CallOption) (*CancelQueryResponse, error) {
	out := new(CancelQueryResponse)
	err := c.cc.Invoke(ctx, InterBrokerService_CancelQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interBrokerServiceClient) InviteToProject(ctx context.Context, in *InviteToProjectRequest, opts ...grpc.CallOption) (*InviteToProjectResponse, error) {
	out := new(InviteToProjectResponse)
	err := c.cc.Invoke(ctx, InterBrokerService_InviteToProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interBrokerServiceClient) ReplyInvitation(ctx context.Context, in *ReplyInvitationRequest, opts ...grpc.CallOption) (*ReplyInvitationResponse, error) {
	out := new(ReplyInvitationResponse)
	err := c.cc.Invoke(ctx, InterBrokerService_ReplyInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interBrokerServiceClient) SyncInfo(ctx context.Context, in *SyncInfoRequest, opts ...grpc.CallOption) (*SyncInfoResponse, error) {
	out := new(SyncInfoResponse)
	err := c.cc.Invoke(ctx, InterBrokerService_SyncInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interBrokerServiceClient) AskInfo(ctx context.Context, in *AskInfoRequest, opts ...grpc.CallOption) (*AskInfoResponse, error) {
	out := new(AskInfoResponse)
	err := c.cc.Invoke(ctx, InterBrokerService_AskInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interBrokerServiceClient) ExchangeJobInfo(ctx context.Context, in *ExchangeJobInfoRequest, opts ...grpc.CallOption) (*ExchangeJobInfoResponse, error) {
	out := new(ExchangeJobInfoResponse)
	err := c.cc.Invoke(ctx, InterBrokerService_ExchangeJobInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterBrokerServiceServer is the server API for InterBrokerService service.
// All implementations must embed UnimplementedInterBrokerServiceServer
// for forward compatibility
type InterBrokerServiceServer interface {
	// Distribute query task to other participants
	DistributeQuery(context.Context, *DistributeQueryRequest) (*DistributeQueryResponse, error)
	CancelQuery(context.Context, *CancelQueryRequest) (*CancelQueryResponse, error)
	// Project related
	InviteToProject(context.Context, *InviteToProjectRequest) (*InviteToProjectResponse, error)
	ReplyInvitation(context.Context, *ReplyInvitationRequest) (*ReplyInvitationResponse, error)
	// sync new table & ccl settings
	SyncInfo(context.Context, *SyncInfoRequest) (*SyncInfoResponse, error)
	// ask information (project settings/table schema/ccl settings)
	AskInfo(context.Context, *AskInfoRequest) (*AskInfoResponse, error)
	// sync job running info. Currently ask endpoint of peer engine(not issuer),
	// for three parties job
	// warning: not need in two parties job
	ExchangeJobInfo(context.Context, *ExchangeJobInfoRequest) (*ExchangeJobInfoResponse, error)
	mustEmbedUnimplementedInterBrokerServiceServer()
}

// UnimplementedInterBrokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterBrokerServiceServer struct {
}

func (UnimplementedInterBrokerServiceServer) DistributeQuery(context.Context, *DistributeQueryRequest) (*DistributeQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeQuery not implemented")
}
func (UnimplementedInterBrokerServiceServer) CancelQuery(context.Context, *CancelQueryRequest) (*CancelQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelQuery not implemented")
}
func (UnimplementedInterBrokerServiceServer) InviteToProject(context.Context, *InviteToProjectRequest) (*InviteToProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToProject not implemented")
}
func (UnimplementedInterBrokerServiceServer) ReplyInvitation(context.Context, *ReplyInvitationRequest) (*ReplyInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyInvitation not implemented")
}
func (UnimplementedInterBrokerServiceServer) SyncInfo(context.Context, *SyncInfoRequest) (*SyncInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncInfo not implemented")
}
func (UnimplementedInterBrokerServiceServer) AskInfo(context.Context, *AskInfoRequest) (*AskInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskInfo not implemented")
}
func (UnimplementedInterBrokerServiceServer) ExchangeJobInfo(context.Context, *ExchangeJobInfoRequest) (*ExchangeJobInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeJobInfo not implemented")
}
func (UnimplementedInterBrokerServiceServer) mustEmbedUnimplementedInterBrokerServiceServer() {}

// UnsafeInterBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterBrokerServiceServer will
// result in compilation errors.
type UnsafeInterBrokerServiceServer interface {
	mustEmbedUnimplementedInterBrokerServiceServer()
}

func RegisterInterBrokerServiceServer(s grpc.ServiceRegistrar, srv InterBrokerServiceServer) {
	s.RegisterService(&InterBrokerService_ServiceDesc, srv)
}

func _InterBrokerService_DistributeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterBrokerServiceServer).DistributeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterBrokerService_DistributeQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterBrokerServiceServer).DistributeQuery(ctx, req.(*DistributeQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterBrokerService_CancelQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterBrokerServiceServer).CancelQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterBrokerService_CancelQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterBrokerServiceServer).CancelQuery(ctx, req.(*CancelQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterBrokerService_InviteToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterBrokerServiceServer).InviteToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterBrokerService_InviteToProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterBrokerServiceServer).InviteToProject(ctx, req.(*InviteToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterBrokerService_ReplyInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterBrokerServiceServer).ReplyInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterBrokerService_ReplyInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterBrokerServiceServer).ReplyInvitation(ctx, req.(*ReplyInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterBrokerService_SyncInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterBrokerServiceServer).SyncInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterBrokerService_SyncInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterBrokerServiceServer).SyncInfo(ctx, req.(*SyncInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterBrokerService_AskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterBrokerServiceServer).AskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterBrokerService_AskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterBrokerServiceServer).AskInfo(ctx, req.(*AskInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterBrokerService_ExchangeJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeJobInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterBrokerServiceServer).ExchangeJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterBrokerService_ExchangeJobInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterBrokerServiceServer).ExchangeJobInfo(ctx, req.(*ExchangeJobInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterBrokerService_ServiceDesc is the grpc.ServiceDesc for InterBrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterBrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scql.pb.InterBrokerService",
	HandlerType: (*InterBrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DistributeQuery",
			Handler:    _InterBrokerService_DistributeQuery_Handler,
		},
		{
			MethodName: "CancelQuery",
			Handler:    _InterBrokerService_CancelQuery_Handler,
		},
		{
			MethodName: "InviteToProject",
			Handler:    _InterBrokerService_InviteToProject_Handler,
		},
		{
			MethodName: "ReplyInvitation",
			Handler:    _InterBrokerService_ReplyInvitation_Handler,
		},
		{
			MethodName: "SyncInfo",
			Handler:    _InterBrokerService_SyncInfo_Handler,
		},
		{
			MethodName: "AskInfo",
			Handler:    _InterBrokerService_AskInfo_Handler,
		},
		{
			MethodName: "ExchangeJobInfo",
			Handler:    _InterBrokerService_ExchangeJobInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/broker.proto",
}
